---
title: "Ajar Admin Panel Development Standards"
description: "Unified rules for building consistent, secure, and high-performance Next.js apps"
alwaysApply: true
---

# üß≠ General Principles

- Use **Next.js App Router** with **TypeScript**.
- Keep code **clean, modular, and reusable**.
- Each feature folder must be **self-contained** (`page.tsx`, `api.ts`, `components/`, `hooks/`).
- Maximum file length: **400 lines**.
- Use `console.info`, `console.warn`, and `console.error` for **debug logging** ‚Äî Jest testing not required.
- Follow the **principles of security, accessibility, and scalability** in all modules.

---

# üåç Internationalization (i18n)

- Use **Next-intl** for translation and locale management.
- Support **RTL** and **LTR** directions.
- Language files must be split logically:

```bash
/locales
  /en
    auth.json
    profile.json
    settings.json
  /ar
    auth.json
    profile.json
    settings.json
````

* Ensure `<html dir>` is dynamic based on locale in `/app/layout.tsx`.

---

# üí° Rendering Rules

## SEO-important pages:

* Use **Server-Side Rendering (SSR)**.
* Implement `generateMetadata` for SEO.
* Client components (animations, forms) should be separated from SSR components.

## Non-SEO pages:

* Use **Client-Side Rendering (CSR)**.
* Handle data fetching with **React Query** (client) or **SWR** (server).

## Performance:

* Use **lazy loading** and **dynamic imports** where possible.
* Apply **code splitting** for large UI modules.
* Always define a `loading.tsx` and `error.tsx` in each page directory.

---

# üîê Security Principles

* Apply **Content Security Policy (CSP)** headers via `next-safe-middleware` or `next.config.js`.
* Use **HttpOnly session cookies** for authentication.
* Validate all inputs with **Zod**.
* Encode all outputs in user-facing content to prevent XSS.
* Sanitize HTML if rendering from user data.
* Never expose **API keys or environment variables** in the frontend.
* Ensure all API routes are protected by middleware with role-based access control.

---

# ‚öôÔ∏è API Integration

* Follow `API-docx.json` structure for endpoints and params.
* All API calls must go through a single wrapper (`apiClient.ts`).
* Use **React Query** for fetching, caching, and mutations.
* Handle errors with `toast` or **sonner** (prefer sonner).

```ts
// Example
try {
  const data = await apiClient.get("/admin/listings");
  console.info("‚úÖ Listings fetched", data);
} catch (error) {
  console.error("‚ùå Error fetching listings", error);
}
```

---

# üß± UI & Components

* Use **shadcn/ui** components and extend via `context7`.
* Default theme direction: **RTL**.
* Avoid inline styles; use **Tailwind CSS**.
* Each UI component must have:

  * Proper accessibility attributes (`aria-*`, `role`).
  * Minimal coupling (no business logic inside).
* For animations, use **Framer Motion**.
* Skeleton loaders for all major content sections.

---

# üìà Performance Monitoring

* Add **Sentry** for runtime error tracking.
* Use `console.time()` and `console.timeEnd()` in critical functions to log performance.
* Avoid unnecessary re-renders: use `React.memo` or `useCallback`.

---

# üîî Notifications & Feedback

* Prefer **sonner** over `use-toast`.
* Do not import `use-toast` directly.
* For background actions (e.g., saving, deleting), show success/error via sonner.

```ts
import { toast } from "sonner";
toast.success("Listing updated successfully!");
```

---

# üß© Folder-Level Standards

## `/app`

* Default: RTL layout
* Use SEO optimizations for public-facing routes
* CSR + SSR both supported based on page type
* Must include:

  * `/loading.tsx`
  * `/error.tsx`
  * `/layout.tsx`
  * `/not-found.tsx`

## `/components`

* Reusable, small, and focused.
* Avoid logic in presentation components.

## `/lib`

* Only utility functions (pure, reusable).
* Add `console.debug()` logs for tracking.

---

# üß† Development Notes

* Always document complex logic with `/** JSDoc */` comments.
* Use environment variables via `process.env.*` ‚Äî never hardcode.
* Keep dependencies updated (`pnpm audit fix --latest`).
* Ensure accessibility (color contrast, focus states, keyboard navigation).
* Apply security headers in production build:

  * `X-Frame-Options: DENY`
  * `X-Content-Type-Options: nosniff`
  * `Referrer-Policy: strict-origin-when-cross-origin`

---

# ‚úÖ Summary

| Category      | Principle                           |
| ------------- | ----------------------------------- |
| i18n          | next-intl + RTL/LTR dynamic         |
| SEO           | SSR + Metadata                      |
| Security      | CSP, input validation, safe cookies |
| API           | React Query + structured client     |
| UI            | shadcn/ui + RTL                     |
| Performance   | Lazy load, code splitting, logging  |
| Notifications | sonner only                         |
| Testing       | console-based logs only             |